
---
en:
  desc: 
    aggregate-children-count: "Renders the total count of children of the aggregated pages.  Accepts the
      same options as @<r:children:each />@.

      *Usage*:
      
      <pre><code><r:aggregate paths=\"/section1; /section2; /section3\">
        <r:children:count />
      </r:aggregate></code></pre>"
    aggregate-children-each: "Renders the contained block for each child of the aggregated pages.  Accepts the
      same options as the plain @<r:children:each />@.

      *Usage*:
      
      <pre><code><r:aggregate paths=\"/section1; /section2; /section3\">
        <r:children:each>
            ...
        </r:children:each>
      </r:aggregate></code></pre>"
    aggregate-children-first: "Renders the first child of the aggregated pages.  Accepts the
      same options as @<r:children:each />@.

      *Usage*:
      
      <pre><code><r:aggregate paths=\"/section1; /section2; /section3\">
        <r:children:first>
            ...
        </r:children:first>
      </r:aggregate></code></pre>"
    aggregate-children-last: "Renders the last child of the aggregated pages.  Accepts the
      same options as @<r:children:each />@.

      *Usage*:
      
      <pre><code><r:aggregate paths=\"/section1; /section2; /section3\">
        <r:children:last>
            ...
        </r:children:last>
      </r:aggregate></code></pre>"
    aggregate-each: "Sets the scope to the individual aggregated page allowing you to
      iterate through each of the listed paths.
      
      *Usage*:
      
      <pre><code><r:aggregate:each paths=\"/section1; /section2; /section3\"> ... </r:aggregate:each></code></pre>"
    aggregate: "Aggregates the children of multiple paths using the @paths@ attribute.
      Useful for combining many different sections/categories into a single
      feed or listing.
      
      *Usage*:
      
      <pre><code><r:aggregate paths=\"/section1; /section2; /section3\"> ... </r:aggregate></code></pre>"
    asset-aspect: "Returns the aspect ratio of the asset, which must be an image."
    asset-asset_content_type: "Renders the @asset_content_type@ attribute of the asset"
    asset-asset_file_name: "Renders the @asset_file_name@ attribute of the asset"
    asset-asset_file_size: "Renders the @asset_file_size@ attribute of the asset"
    asset-caption: "Renders the @caption@ attribute of the asset"
    asset-extension: "Renders the @extension@ attribute of the asset"
    asset-flash: "Embeds a flash-movie in a cross-browser-compatible fashion using only HTML
      If no width and height attributes are given it will use the intrinsic
      dimensions of the swf file
      
      *Usage:*
      <pre><code><r:asset:flash [name=\"asset name\" or id=\"asset id\"] [width=\"100\"] [height=\"100\"]>Fallback content</flash></code></pre>
      
      *Example with text fallback:*
      <pre><code><r:asset:flash name=\"flash_movie\">
            Sorry, you need to have flash installed, <a href=\"http://adobe.com/flash\">get it here</a>
      </flash></code></pre>
      
      *Example with image fallback and explicit dimensions:*
      <pre><code><r:asset:flash name=\"flash_movie\" width=\"300\" height=\"200\">
            <r:asset:image name=\"flash_screenshot\" />
        </flash></code></pre>"
    asset-height: "Renders the height of the asset."
    asset-id: "Renders the @id@ attribute of the asset"
    asset-if_content_type: "Renders the containing elements only if the asset's content type matches
      the regular expression given in the @matches@ attribute. If the
      @ignore_case@ attribute is set to false, the match is case sensitive. By
      default, @ignore_case@ is set to true.
        
      The @name@ or @id@ attribute is required on the parent tag unless this tag is used in @asset:each@.

      *Usage:* 
      <pre><code><r:asset:each><r:if_content_type matches=\"regexp\" [ignore_case=true|false\"]>...</r:if_content_type></r:asset:each></code></pre>"
    asset-image: "Renders an image tag for the asset.
      
      Using the optional @size@ attribute, different sizes can be display.
      \"thumbnail\" and \"icon\" sizes are built in, but custom ones can be set
      by changing `assets.thumbnails.[type]` in the Radiant::Config settings.
      
      *Usage:* 
      <pre><code><r:asset:image [name=\"asset name\" or id=\"asset id\"] [size=\"icon|thumbnail|whatever\"]></code></pre>"
    asset-link: "Renders a link to the asset. If the asset is an image, the <code>size</code> attribute can be used to 
      generate a link to that size. 
      
      *Usage:* 
      <pre><code><r:asset:link [name=\"asset name\" or id=\"asset id\"] [size=\"icon|thumbnail\"] /></code></pre>"
    asset-orientation: "Returns a string representing the orientation of the asset, which must be imageable. 
      (ie, it is an image or it has been processed to produce an image). 
      Can be 'horizontal', 'vertical' or 'square'."
    asset-title: "Renders the @title@ attribute of the asset"
    asset-top_padding: "Renders the value for a top padding for a thumbnail. Put the thumbnail in a
      container with specified height and using this tag you can vertically
      align the image within its container.
  
      *Usage*:
      <pre><code><r:asset:top_padding container = \"140\" [size=\"icon\"]/></code></pre>
  
      *Working Example*:
      <pre><code>
        <ul>
            <r:asset:each>
              <li style=\"height:140px\">
                  <img style=\"padding-top:<r:top_padding size='category' container='140' />px\" 
                         src=\"<r:url />\" alt=\"<r:title />\" />
              </li>
            </r:asset:each>
        </ul>
      </code></pre>"
    asset-url: "Renders the url for the asset. If the asset is an image, the <code>size</code> attribute can be used to 
      generate the url for that size. 
      
      *Usage:* 
      <pre><code><r:url [name=\"asset name\" or id=\"asset id\"] [size=\"icon|thumbnail\"]></code></pre>"
    asset-width: "Renders the width of the asset."
    asset: "The namespace for referencing images and assets.
      
      *Usage:* 
      <pre><code><r:asset [name=\"asset name\"]>...</r:asset></code></pre>"
    assets-first: "References the first asset attached to the current page.  
      
      *Usage:* 
      <pre><code><r:assets:first>...</r:assets:first></code></pre>"
    assets: "Cycles through all assets attached to the current page.  
      This tag does not require the name atttribute, nor do any of its children.
      Use the @limit@ and @offset@ attribute to render a specific number of assets.
      Use @by@ and @order@ attributes to control the order of assets.
      Use @extensions@ attribute to specify which assets to be rendered.
      
      *Usage:* 
      <pre><code><r:assets:each [limit=0] [offset=0] [order=\"asc|desc\"] [by=\"position|title|...\"] [extensions=\"png|pdf|doc\"]>...</r:assets:each></code></pre>"
    author: "Renders the name of the author of the current page."
    boolean_part-if: "Renders its contents if the selected part contains the text \"true\".  When
      used with check_box part-types in a template, can turn on and off sections
      of content.  The 'part' attribute is required.
      
      *Usage*:
      
      <pre><code><r:boolean_part:if part=\"display_sidebar\">Sidebar content</r:boolean_part:if></code></pre>"
    boolean_part-unless: "Renders its contents if the selected part does not contain the text \"true\".  When
      used with check_box part-types in a template, can turn on and off sections
      of content.  The 'part' attribute is required.
      
      *Usage*:
      
      <pre><code><r:boolean_part:unless part=\"display_sidebar\">Sidebar content</r:boolean_part:unless></code></pre>"
    breadcrumb: "Renders the @breadcrumb@ attribute of the current page."
    breadcrumbs: "Renders a trail of breadcrumbs to the current page. The separator attribute
      specifies the HTML fragment that is inserted between each of the breadcrumbs. By
      default it is set to @>@. The boolean @nolinks@ attribute can be specified to render
      breadcrumbs in plain text, without any links (useful when generating title tag). 
      Set the boolean @noself@ attribute to omit the present page (useful in page headers).

      *Usage:*

      <pre><code><r:breadcrumbs [separator=\"separator_string\"] [nolinks=\"true\"] [noself=\"true\"]/></code></pre>"
    children-count: "Renders the total number of children."
    children-each-child: "Page attribute tags inside of this tag refer to the current child. This is occasionally
      useful if you are inside of another tag (like &lt;r:find&gt;) and need to refer back to the
      current child.

      *Usage:*
      
      <pre><code><r:children:each>
        <r:child>...</r:child>
      </r:children:each>
      </code></pre>"
    children-each-header: "Renders the tag contents only if the contents do not match the previous header. This
      is extremely useful for rendering date headers for a list of child pages.

      If you would like to use several header blocks you may use the @name@ attribute to
      name the header. When a header is named it will not restart until another header of
      the same name is different.

      Using the @restart@ attribute you can cause other named headers to restart when the
      present header changes. Simply specify the names of the other headers in a semicolon
      separated list.

      *Usage:*
      
      <pre><code><r:children:each>
        <r:header [name=\"header_name\"] [restart=\"name1[;name2;...]\"]>
            ...
        </r:header>
      </r:children:each>
      </code></pre>"
    children-each-if_first: "Renders the tag contents only if the current page is the first child in the context of
      a children:each tag
      
      *Usage:*
      
      <pre><code><r:children:each>
        <r:if_first >
            ...
        </r:if_first>
      </r:children:each>
      </code></pre>"
    children-each-if_last: "Renders the tag contents only if the current page is the last child in the context of
      a children:each tag
      
      *Usage:*
      
      <pre><code><r:children:each>
        <r:if_last >
            ...
        </r:if_last>
      </r:children:each>
      </code></pre>"
    children-each-unless_first: "Renders the tag contents unless the current page is the first child in the context of
      a children:each tag
      
      *Usage:*
      
      <pre><code><r:children:each>
        <r:unless_first >
            ...
        </r:unless_first>
      </r:children:each>
      </code></pre>"
    children-each-unless_last: "Renders the tag contents unless the current page is the last child in the context of
      a children:each tag
      
      *Usage:*
      
      <pre><code><r:children:each>
        <r:unless_last >
            ...
        </r:unless_last>
      </r:children:each>
      </code></pre>"
    children-each: "Cycles through each of the children. Inside this tag all page attribute tags
      are mapped to the current child page.
      
      Supply @paginated=\"true\"@ to paginate the displayed list. will_paginate view helper
      options can also be specified, including @per_page@, @previous_label@, @next_label@,
      @class@, @separator@, @inner_window@ and @outer_window@.

      *Usage:*
      
      <pre><code><r:children:each [offset=\"number\"] [limit=\"number\"]
       [by=\"published_at|updated_at|created_at|slug|title|keywords|description\"]
       [order=\"asc|desc\"] 
       [status=\"draft|reviewed|published|hidden|all\"]
       [paginated=\"true\"]
       [per_page=\"number\"]
       >
       ...
      </r:children:each>
      </code></pre>"
    children-first: "Returns the first child. Inside this tag all page attribute tags are mapped to
      the first child. Takes the same ordering options as @<r:children:each>@.

      *Usage:*
      
      <pre><code><r:children:first>...</r:children:first></code></pre>"
    children-grouped: "Cycles through groups of child pages. Inside this tag, children:each is available again.
      Takes the same parameters as a normal children:each, except for pagination.
      
      *Usage:*
      
      <pre><code><r:children:grouped [size=\"number\"] [limit=\"number\"]
       [by=\"published_at|updated_at|created_at|slug|title|keywords|description\"]
       [order=\"asc|desc\"] 
       [status=\"draft|reviewed|published|hidden|all\"]
       >
       <div class=\"container\"><r:children:each>...</r:children:each></div>
      </r:children:grouped>
      </code></pre>"
    children-last: "Returns the last child. Inside this tag all page attribute tags are mapped to
      the last child. Takes the same ordering options as @<r:children:each>@.

      *Usage:*
      
      <pre><code><r:children:last>...</r:children:last></code></pre>"
    children: "Gives access to a page's children.

      *Usage:*
      
      <pre><code><r:children>...</r:children></code></pre>"
    config-setting: "Renders the Radiant::Config setting specified by the required 'key' attribute.
  
  *Usage*:

  <pre><code><r:config:setting key=\"admin.title\" /></code></pre>"
    content: "Renders the main content of a page. Use the @part@ attribute to select a specific
      page part. By default the @part@ attribute is set to body. Use the @inherit@
      attribute to specify that if a page does not have a content part by that name that
      the tag should render the parent's content part. By default @inherit@ is set to
      @false@. Use the @contextual@ attribute to force a part inherited from a parent
      part to be evaluated in the context of the child page. By default 'contextual'
      is set to true.

      *Usage:*
      
      <pre><code><r:content [part=\"part_name\"] [inherit=\"true|false\"] [contextual=\"true|false\"] /></code></pre>"
    content_for_layout: "Allows nested layouts to target this layout.  The contents of <r:inside_layout> tag blocks in another
            layout will have their contents inserted at the location given by this tag (if they target this
            layout).  This tag also behaves like a standard <r:content/> tag if this layout is specified directly
            by a page.
        
            This tag is intended to be used inside layouts.
        
            *Usage:*
        
            <html>
              <body>
                  <r:content_for_layout/>
              </body>
            </html>"
    cycle: "Renders a counter value or one of the values given based on a global cycle counter. 
      
      To get a numeric counter just use the tag, or specify a start value with @start@.
      Use the @reset@ attribute to reset the cycle to the beginning. Using @reset@ on a
      numbered cycle will begin at 0. Use the @name@  attribute to track multiple cycles; 
      the default is @cycle@.

      *Usage:*
      
      <pre><code><r:cycle [values=\"first, second, third\"] [reset=\"true|false\"] [name=\"cycle\"] [start=\"second\"] /></code></pre>
      <pre><code><r:cycle start=\"3\" /></code></pre>"
    date: "Renders the date based on the current page (by default when it was published or created).
      The format attribute uses the same formating codes used by the Ruby @strftime@ function. By
      default it's set to @&#37;A, &#37;B &#37;d, &#37;Y@.  The @for@ attribute selects which date to render.  Valid
      options are @published_at@, @created_at@, @updated_at@, and @now@. @now@ will render the
      current date/time, regardless of the  page.

      *Usage:*

      <pre><code><r:date [format=\"&#37;A, &#37;B &#37;d, &#37;Y\"] [for=\"published_at\"]/></code></pre>"
    escape_html: "Escapes angle brackets, etc. for rendering in an HTML document.

      *Usage:*

      <pre><code><r:escape_html>...</r:escape_html></code></pre>"
    field: "Renders the content of the field given in the @name@ attribute.

      *Usage:*

      <pre><code><r:field name=\"Keywords\" /></code></pre>"
    find: "Inside this tag all page related tags refer to the page found at the @path@ attribute.
      @path@s may be relative or absolute paths.

      *Usage:*

      <pre><code><r:find path=\"value_to_find\">...</r:find></code></pre>"
    gravatar: "Renders the Gravatar of the author of the current page or the named user.

      *Usage:*

      <pre><code><r:gravatar /></code></pre>

      or

      <pre><code><r:gravatar [name=\"User Name\"]
            [rating=\"G | PG | R | X\"]
            [size=\"32px\"] /></code></pre>"
    hide: "Nothing inside a set of hide tags is rendered.

      *Usage:*

      <pre><code><r:hide>...</r:hide></code></pre>"
    if_ancestor_or_self: "Renders the contained element if the current item is an ancestor of the current page or if it is the page itself."
    if_assets: "Renders the contained elements only if the current contextual page has one or
      more assets. The @min_count@ attribute specifies the minimum number of required
      assets. You can also filter by extensions with the @extensions@ attribute.
  
      *Usage:*
      <pre><code><r:if_assets [min_count=\"n\"]>...</r:if_assets></code></pre>"
    if_bool: "Given the name of a boolean page part, expands if that part's value is true.
        
        *Usage:*
        
        <pre><code><r:if_bool part=\"boolean part name\">...</r:if_bool></code></pre>"
    if_children: "Renders the contained elements only if the current contextual page has children.
      
      *Usage:*
      <pre><code><r:if_children>...</r:if_children></code></pre>"
    if_content: "Renders the containing elements if all of the listed parts exist on a page.
      By default the @part@ attribute is set to @body@, but you may list more than one
      part by separating them with a comma. Setting the optional @inherit@ to true will
      search ancestors independently for each part. By default @inherit@ is set to @false@.

      When listing more than one part, you may optionally set the @find@ attribute to @any@
      so that it will render the containing elements if any of the listed parts are found.
      By default the @find@ attribute is set to @all@.

      *Usage:*
      
      <pre><code><r:if_content [part=\"part_name, other_part\"] [inherit=\"true\"] [find=\"any\"]>...</r:if_content></code></pre>"
    if_dev: "Renders the containing elements only if Radiant in is development mode.

      *Usage:*

      <pre><code><r:if_dev>...</r:if_dev></code></pre>"
    if_earlier: "Given the name of a date page part, expands if that part's value is earlier
        than @Time.now@. Accepts an optional @than@ parameter if you need to compare the
        value to something other than @Time.now@. @than@ can be any string parseable by DateTime.
        
        *Usage:*
        
        <pre><code><r:if_earlier [than=\"April 7 2009\"] part=\"datetime part name\">...</r:if_earlier></code></pre>"
    if_equal: "Given the name of an integer part, expands if the content is equal to the required @to@ attribute.

        *Usage:*
        <pre><code><r:if_equal to=\"100\" part=\"integer part name\">...</r:if_equal></code></pre>"
    if_field: "Renders the contained elements if the field given in the @name@ attribute
      exists. The tag also takes an optional @equals@ or @matches@ attribute;
      these will expand the tag if the field's content equals or matches the
      given string or regex.

      *Usage:*

      <pre><code><r:if_field name=\"author\" [equals|matches=\"John\"] [ignore_case=\"true|false\"]>...</r:if_field></code></pre>"
    if_greater: "Given the name of an integer page part, compares it to the required @than@ attribute. The tag
        expands if the content is greater than the compared value. An optional @orequal@ attribute may
        be passed to do a greater-or-equal comparison. @orequal@ defaults to false.
            
        *Usage:*
        <pre><code><r:if_greater than=\"100\" [orequal=\"true|false\"] part=\"integer part name\">...</r:if_greater></code></pre>"
    if_later: "Given the name of a datetime page part, expands if that part's value is later 
        than @Time.now@. Accepts an optional @than@ parameter if you need to compare the
        value to something other than @Time.now@. @than@ can be any string parseable by DateTime.
        
        *Usage:*
        
        <pre><code><r:if_later [than=\"April 7 2009\"] part=\"datetime part name\">...</r:if_later></code></pre>"
    if_layout: "output the contents of tag if layout equals name (support regex)
            
            *Usage:*
        
            <pre><code><r:if_layout name=\"(parent|parent_of_child)\">
              one of those layouts
            </r:if_layout></code></pre>"
    if_less: "Given the name of an integer page part, compares it to the required @than@ attribute. The tag
        expands if the content is less than the compared value. An optional @orequal@ attribute may be
        passed to do a less-than-or-equal comparison. @orequal@ defaults to false.
            
        *Usage:*
        <pre><code><r:if_less than=\"100\" [orequal=\"true|false\"] part=\"integer part name\">...</r:if_less></code></pre>"
    if_parent: "Renders the contained elements only if the current contextual page has a parent, i.e.
      is not the root page.

      *Usage:*
      
      <pre><code><r:if_parent>...</r:if_parent></code></pre>"
    if_path: "Renders the containing elements only if the page's path matches the regular expression
      given in the @matches@ attribute. If the @ignore_case@ attribute is set to false, the
      match is case sensitive. By default, @ignore_case@ is set to true.

      *Usage:*
      
      <pre><code><r:if_path matches=\"regexp\" [ignore_case=\"true|false\"]>...</r:if_path></code></pre>"
    if_self: "Renders the contained element if the current item is also the current page."
    inside_layout: "Renders the contents of the tag inside of a \"parent\" layout, which is selected via the +name+
            attribute.  The contents of this tag are placed at a corresponding <r:content_for_layout/> tag
            within the parent layout.  This tag is intended to be used within your layouts, and should
            only appear once per layout.
      
            *Usage:*

            <r:inside_layout name=\"master\">
              <div id=\"main-column\">
                  <r:content_for_layout/>
              </div>
            </r:inside_layout>"
    javascript: "Renders the content from or a reference to the javascript specified in the @slug@ 
attribute. Additionally, the @as@ attribute can be used to make the tag render 
as one of the following:

* with no @as@ value the javascript's content is rendered by default.
* @inline@ - wraps the javascript's content in an (X)HTML @<script>@ element.
* @path@ - the full path to the javascript.
* @link@ - embeds the url in an (X)HTML @<script>@ element (creating a link to the external javascript).

*Additional Options:*
When rendering @as=\"inline\"@ or @as=\"link\"@, the (X)HTML @type@ attribute
is automatically be set to the default javascript content-type.
You can overrride this attribute or add additional ones by passing extra
attributes to the @<r:javascript>@ tag.
        
*Usage:*
        
<pre><code><r:javascript slug=\"site.css\" as=\"inline\" 
  type=\"text/custom\" id=\"my_id\" />
<r:javascript slug=\"other.js\" as=\"link\" /></code></pre>

The above example will produce the following:
        
<pre><code>            <script type=\"text/custom\" id=\"my_id\">
//<![CDATA[
  var your_script = 'this content';
//]]>
</script>
<script type=\"text/javascript\" src=\"/js/other.js\"></script></code></pre>"
    layout: "Return the layout name of the current page.
        
            *Usage:*
        
            <html>
              <body id=\"<r:layout/>\"
                  My body tag has an id corresponding to the layout I use.  Sweet!
              </body>
            </html>"
    link: "Renders a link to the page. When used as a single tag it uses the page's title
      for the link name. When used as a double tag the part in between both tags will
      be used as the link text. The link tag passes all attributes over to the HTML
      @a@ tag. This is very useful for passing attributes like the @class@ attribute
      or @id@ attribute. If the @anchor@ attribute is passed to the tag it will
      append a pound sign (<code>#</code>) followed by the value of the attribute to
      the @href@ attribute of the HTML @a@ tag--effectively making an HTML anchor.

      *Usage:*

      <pre><code><r:link [anchor=\"name\"] [other attributes...] /></code></pre>
      
      or
      
      <pre><code><r:link [anchor=\"name\"] [other attributes...]>link text here</r:link></code></pre>"
    markdown: "Filters its contents with the Markdown filter.

      *Usage:*

      <pre><code><r:markdown>** bold text **</r:markdown></code></pre>

      produces

      <pre><code><strong> bold text </strong></code></pre>"
    nav: "Render a navigation menu. Walks down the directory tree, expanding the tree up to the current page.
      
      *Usage:*
      <pre><code><r:nav [id=\"subnav\"] [root=\"/products\"] [include_root=\"true\"] [depth=\"2\"] [expand_all=\"true\"]
      [only=\"^/(articles|notices)\"] [except=\".(css|js|xml)/*$\"] /></code></pre> 
      *Attributes:*
      
      * @root@ defaults to \"/\", where to start building the navigation from, you can i.e. use \"/products\" to build a subnav
      * @include_root@ defaults to false, set to true to include the root page (i.e. Home)
      * @ids_for_lis@ defaults to false, enable this to give each li an id (it's slug prefixed with nav_)
      * @ids_for_links@ defaults to false, enable this to give each link an id (it's slug prefixed with nav_)
      
      * @depth@ defaults to 1, which means no sub-ul's, set to 2 or more for a nested list
      * @expand_all@ defaults to false, enable this to have all li's create sub-ul's of their children, i.o. only the currently active li
      
      * @only@ a string or regular expresssion. only pages whose urls match this are included
      * @except@ a string or regular expresssion. pages whose urls match this are not shown. except will override only. use to eliminate non-content file-types
      
      * @id@, @class@,..: go as html attributes of the outer ul"
    navigation-if_first: "Renders the containing elements if the element is the first
      in the navigation list

      *Usage:*

      <pre><code><r:normal><r:if_first>...</r:if_first></r:normal></code></pre>"
    navigation-if_last: "Renders the containing elements if the element is the last
      in the navigation list

      *Usage:*

      <pre><code><r:normal><r:if_last>...</r:if_last></r:normal></code></pre>"
    navigation-unless_first: "Renders the containing elements unless the element is the first
      in the navigation list

      *Usage:*

      <pre><code><r:normal><r:unless_first>...</r:unless_first></r:normal></code></pre>"
    navigation-unless_last: "Renders the containing elements unless the element is the last
      in the navigation list

      *Usage:*

      <pre><code><r:normal><r:unless_last>...</r:unless_last></r:normal></code></pre>"
    navigation: "Renders a list of links specified in the @paths@ attribute according to three
      states:

      * @normal@ specifies the normal state for the link
      * @here@ specifies the state of the link when the path matches the current
         page's PATH
      * @selected@ specifies the state of the link when the current page matches
         is a child of the specified path
      # @if_last@ renders its contents within a @normal@, @here@ or
        @selected@ tag if the item is the last in the navigation elements
      # @if_first@ renders its contents within a @normal@, @here@ or
        @selected@ tag if the item is the first in the navigation elements

      The @between@ tag specifies what should be inserted in between each of the links.

      *Usage:*

      <pre><code><r:navigation paths=\"[Title: path | Title: path | ...]\">
        <r:normal><a href=\"<r:path />\"><r:title /></a></r:normal>
        <r:here><strong><r:title /></strong></r:here>
        <r:selected><strong><a href=\"<r:path />\"><r:title /></a></strong></r:selected>
        <r:between> | </r:between>
      </r:navigation>
      </code></pre>"
    page: "Causes the tags referring to a page's attributes to refer to the current page.

      *Usage:*
      
      <pre><code><r:page>...</r:page></code></pre>"
    pagination: "The pagination tag is not usually called directly. Supply paginated=\"true\" when you display a list and it will
      be automatically display only the current page of results, with pagination controls at the bottom.

      *Usage:*
      
      <pre><code><r:children:each paginated=\"true\" per_page=\"50\" container=\"false\" previous_label=\"foo\" next_label=\"bar\">
        <r:child>...</r:child>
      </r:children:each>
      </code></pre>"
    parent: "Page attribute tags inside this tag refer to the parent of the current page.

      *Usage:*
      
      <pre><code><r:parent>...</r:parent></code></pre>"
    path: "Renders the @path@ attribute of the current page."
    random: "Randomly renders one of the options specified by the @option@ tags.

      *Usage:*

      <pre><code><r:random>
        <r:option>...</r:option>
        <r:option>...</r:option>
        ...
      <r:random>
      </code></pre>"
    rfc1123_date: "Outputs the published date using the format mandated by RFC 1123. (Ideal for RSS feeds.)

      *Usage:*

      <pre><code><r:rfc1123_date /></code></pre>"
    site-dev_domain: "Returns Radiant::Config['site.dev_domain'] as configured under the Settings tab."
    site-domain: "Returns Radiant::Config['site.domain'] as configured under the Settings tab."
    site-title: "Returns Radiant::Config['site.title'] as configured under the Settings tab."
    slug: "Renders the @slug@ attribute of the current page."
    smarty_pants: "Filters its contents with the SmartyPants filter.

      *Usage:*

      <pre><code><r:smarty_pants>\"A revolutionary quotation.\"</r:smarty_pants></code></pre>

      produces

      <pre><code>&#8220;A revolutionary quotation.&#8221;</code></pre>"
    snippet: "Renders the snippet specified in the @name@ attribute within the context of a page.

      *Usage:*

      <pre><code><r:snippet name=\"snippet_name\" /></code></pre>

      When used as a double tag, the part in between both tags may be used within the
      snippet itself, being substituted in place of @<r:yield/>@.

      *Usage:*

      <pre><code><r:snippet name=\"snippet_name\">Lorem ipsum dolor...</r:snippet></code></pre>"
    status: "Prints the page's status as a string.  Optional attribute 'downcase'
      will cause the status to be all lowercase.

      *Usage:*

      <pre><code><r:status [downcase='true'] /></code></pre>"
    stylesheet: "Renders the content from or a reference to the stylesheet specified in the @slug@ 
attribute. Additionally, the @as@ attribute can be used to make the tag render 
as one of the following:

* with no @as@ value the stylesheet's content is rendered by default.
* @inline@ - wraps the stylesheet's content in an (X)HTML @<style>@ element.
* @path@ - the full path to the stylesheet.
* @link@ - embeds the url in an (X)HTML @<link>@ element (creating a link to the external stylesheet).

*Additional Options:*
When rendering @as=\"inline\"@ or @as=\"link\"@, the (X)HTML @type@ attribute
is automatically be set to the default stylesheet content-type.
You can overrride this attribute or add additional ones by passing extra
attributes to the @<r:stylesheet>@ tag.
        
*Usage:*
        
<pre><code><r:stylesheet slug=\"site.css\" as=\"inline\" 
  type=\"text/custom\" id=\"my_id\" />
<r:stylesheet slug=\"other.css\" as=\"link\" 
  rel=\"alternate stylesheet\" /></code></pre>

The above example will produce the following:
        
<pre><code>            <style type=\"text/custom\" id=\"my_id\">
/*<![CDATA[*/
  .your_stylesheet { content: 'here' }
/*]]>*/
</style>
<link rel=\"alternate stylesheet\" type=\"text/css\" 
  href=\"/css/other.css\" /></code></pre>"
    textile: "Filters its contents with the Textile filter.

      *Usage*:

      <pre><code><r:textile>
      * First
      * Second
      </r:textile></code></pre>

      produces:

      <pre><code><ul>
        <li>First</li>
        <li>Second</li>
      </ul></code></pre>"
    title: "Renders the @title@ attribute of the current page."
    unless_ancestor_or_self: "Renders the contained elements unless the current contextual page is either the actual page or one of its parents.

      This is typically used inside another tag (like &lt;r:children:each&gt;) to add conditional mark-up unless the child element is or descends from the current page.

      *Usage:*
      
      <pre><code><r:unless_ancestor_or_self>...</r:unless_ancestor_or_self></code></pre>"
    unless_assets: "The opposite of @<r:if_assets/>@."
    unless_bool: "Given the name of a boolean page part, expands unless that part's value is true.
        
        *Usage:*
        
        <pre><code><r:unless_bool part=\"boolean part name\">...</r:unless_bool></code></pre>"
    unless_children: "Renders the contained elements only if the current contextual page has no children.
      The @status@ attribute limits the status of found child pages to the given status,
      the default is @\"published\"@. @status=\"all\"@ includes all non-virtual pages
      regardless of status.

      *Usage:*
      
      <pre><code><r:unless_children [status=\"published\"]>...</r:unless_children></code></pre>"
    unless_content: "The opposite of the @if_content@ tag. It renders the contained elements if all of the
      specified parts do not exist. Setting the optional @inherit@ to true will search
      ancestors independently for each part. By default @inherit@ is set to @false@.

      When listing more than one part, you may optionally set the @find@ attribute to @any@
      so that it will not render the containing elements if any of the listed parts are found.
      By default the @find@ attribute is set to @all@.

      *Usage:*
      
      <pre><code><r:unless_content [part=\"part_name, other_part\"] [inherit=\"false\"] [find=\"any\"]>...</r:unless_content></code></pre>"
    unless_dev: "The opposite of the @if_dev@ tag.

      *Usage:*

      <pre><code><r:unless_dev>...</r:unless_dev></code></pre>"
    unless_equal: "Given the name of an integer part, expands unless the content is equal to the required @to@ attribute.

        *Usage:*
        <pre><code><r:unless_equal to=\"100\" part=\"integer part name\">...</r:unless_equal></code></pre>"
    unless_field: "The opposite of @if_field@. Renders the contained elements unless the field
      given in the @name@ attribute exists. The tag also takes an optional
      @equals@ or @matches@ attribute; these will expand the tag unless the
      field's content equals or matches the given string or regex.

      *Usage:*

      <pre><code><r:unless_field name=\"author\" [equals|matches=\"John\"] [ignore_case=\"true|false\"]>...</r:unless_field></code></pre>"
    unless_layout: "Output the contents of tag unless layout equals name (support regex)
            
            *Usage:*
        
            <pre><code><r:unless_layout name=\"parent\">
              not the parent layotu
            </r:unless_layout></code></pre>"
    unless_parent: "Renders the contained elements only if the current contextual page has no parent, i.e.
      is the root page.

      *Usage:*
      
      <pre><code><r:unless_parent>...</r:unless_parent></code></pre>"
    unless_path: "The opposite of the @if_path@ tag.

      *Usage:*
      
      <pre><code><r:unless_path matches=\"regexp\" [ignore_case=\"true|false\"]>...</r:unless_path></code></pre>"
    unless_self: "Renders the contained elements unless the current contextual page is also the actual page.

      This is typically used inside another tag (like &lt;r:children:each&gt;) to add conditional mark-up unless the child element is the current page.

      *Usage:*

      <pre><code><r:unless_self>...</r:unless_self></code></pre>"
    yield: "Used within a snippet as a placeholder for substitution of child content, when
      the snippet is called as a double tag.

      *Usage (within a snippet):*
      
      <pre><code>
      <div id=\"outer\">
        <p>before</p>
        <r:yield/>
        <p>after</p>
      </div>
      </code></pre>

      If the above snippet was named \"yielding\", you could call it from any Page,
      Layout or Snippet as follows:

      <pre><code><r:snippet name=\"yielding\">Content within</r:snippet></code></pre>

      Which would output the following:

      <pre><code>
      <div id=\"outer\">
        <p>before</p>
        Content within
        <p>after</p>
      </div>
      </code></pre>

      When called in the context of a Page or a Layout, @<r:yield/>@ outputs nothing."
